{"ast":null,"code":"import axios from \"axios\";\nimport { setAlert } from './alert';\nimport { PROFILES_LOADED, PROFILES_ERROR, HISTORY_LOADED, HISTORY_ERROR, TRANSFER_SUCCESS, TRANSFER_ERROR, ADD_CUSTOMER, ADD_CUSTOMER_ERROR } from \"./types\";\nexport const loadProfile = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/allUsers');\n    dispatch({\n      type: PROFILES_LOADED,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: PROFILES_ERROR,\n      payload: {\n        msg: error,\n        status: error.response.status\n      }\n    });\n  }\n};\nexport const loadHistory = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/history');\n    dispatch({\n      type: HISTORY_LOADED,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: HISTORY_ERROR,\n      payload: {\n        msg: error,\n        status: error.response.status\n      }\n    });\n  }\n};\nexport const transfer = ({\n  From,\n  To,\n  amount\n}, history) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    From,\n    To,\n    amount\n  });\n  try {\n    const res = await axios.post('/api/transaction', body, config);\n    dispatch({\n      type: TRANSFER_SUCCESS,\n      payload: res.data\n    });\n    history.push('/profile');\n    alert(`${res.data}`);\n  } catch (error) {\n    dispatch({\n      type: TRANSFER_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n};\n\n// Add new customer\nexport const addCustomer = formData => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    // Transform formData to match the server model\n    const customerData = {\n      name: formData.name,\n      email: formData.email,\n      acc_balance: parseFloat(formData.balance),\n      acc_no: Math.floor(Math.random() * 9000000000) + 1000000000,\n      // Generate 10-digit account number\n      profession: \"NA\" // Default value\n    };\n    const res = await axios.post('/api/users', customerData, config);\n    dispatch({\n      type: ADD_CUSTOMER,\n      payload: res.data\n    });\n    dispatch(setAlert('Customer added successfully', 'success'));\n    // Reload profiles after adding new customer\n    dispatch(loadProfile());\n  } catch (err) {\n    var _err$response, _err$response$data;\n    const errors = (_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.errors;\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    } else {\n      dispatch(setAlert('Error adding customer', 'danger'));\n    }\n    dispatch({\n      type: ADD_CUSTOMER_ERROR\n    });\n  }\n};","map":{"version":3,"names":["axios","setAlert","PROFILES_LOADED","PROFILES_ERROR","HISTORY_LOADED","HISTORY_ERROR","TRANSFER_SUCCESS","TRANSFER_ERROR","ADD_CUSTOMER","ADD_CUSTOMER_ERROR","loadProfile","dispatch","res","get","type","payload","data","error","msg","status","response","loadHistory","transfer","From","To","amount","history","config","headers","body","JSON","stringify","post","push","alert","statusText","addCustomer","formData","customerData","name","email","acc_balance","parseFloat","balance","acc_no","Math","floor","random","profession","err","_err$response","_err$response$data","errors","forEach"],"sources":["D:/Bank-mgmt-system/src/actions/profile.js"],"sourcesContent":["import axios from \"axios\";\nimport { setAlert } from './alert';\nimport { PROFILES_LOADED, PROFILES_ERROR, HISTORY_LOADED, HISTORY_ERROR, TRANSFER_SUCCESS, TRANSFER_ERROR, ADD_CUSTOMER, ADD_CUSTOMER_ERROR } from \"./types\";\n\nexport const loadProfile = () => async dispatch => {\n    try{\n        const res = await axios.get('/api/allUsers')\n        dispatch({\n            type: PROFILES_LOADED,\n            payload: res.data\n        })\n    }catch(error){\n        dispatch({\n            type: PROFILES_ERROR,\n            payload: { msg: error, status: error.response.status }\n        })\n    }\n}\n\nexport const loadHistory = () => async dispatch => {\n    try{\n        const res = await axios.get('/api/history')\n        dispatch({\n            type: HISTORY_LOADED,\n            payload: res.data\n        })\n    }catch(error){\n        dispatch({\n            type: HISTORY_ERROR,\n            payload: { msg: error, status: error.response.status }\n        })\n    }\n}\n\nexport const transfer = ({From, To, amount}, history) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n    const body = JSON.stringify({From, To, amount})\n    try{\n        const res = await axios.post('/api/transaction', body, config)\n        dispatch({\n            type: TRANSFER_SUCCESS,\n            payload: res.data\n        })\n        history.push('/profile')\n        alert(`${res.data}`)\n    }catch(error){\n        dispatch({\n            type: TRANSFER_ERROR,\n            payload: { msg: error.response.statusText, status: error.response.status }\n        })\n    }\n\n}\n\n// Add new customer\nexport const addCustomer = (formData) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    // Transform formData to match the server model\n    const customerData = {\n      name: formData.name,\n      email: formData.email,\n      acc_balance: parseFloat(formData.balance),\n      acc_no: Math.floor(Math.random() * 9000000000) + 1000000000, // Generate 10-digit account number\n      profession: \"NA\" // Default value\n    };\n\n    const res = await axios.post('/api/users', customerData, config);\n\n    dispatch({\n      type: ADD_CUSTOMER,\n      payload: res.data\n    });\n\n    dispatch(setAlert('Customer added successfully', 'success'));\n    // Reload profiles after adding new customer\n    dispatch(loadProfile());\n  } catch (err) {\n    const errors = err.response?.data?.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    } else {\n      dispatch(setAlert('Error adding customer', 'danger'));\n    }\n\n    dispatch({\n      type: ADD_CUSTOMER_ERROR\n    });\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}